name: Test

on:
  pull_request:
  workflow_dispatch:

concurrency:
  cancel-in-progress: true
  group: {% raw %}${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}{% endraw %}

env:
  CI: true
  FORCE_COLOR: 1
  NODE_VERSION: "{{ node_version }}"
  PYTHON_VERSION: "{{ python_version }}"

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: {{ postgres_docker_image }}:{{ postgres_version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: {{ postgres_uri_scheme }}://postgres:postgres@localhost:5432/postgres
      EMAIL_RELAY_DATABASE_URL: {{ postgres_uri_scheme }}://postgres:postgres@localhost:5432/email-relay
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}

      - name: Install uv
        run: |
          python -m pip install -U pip uv

      - name: Get cache dir
        id: uv-cache
        run: |
          echo "dir=$(uv cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache-uv
        with:
          path: {% raw %}${{ steps.uv-cache.outputs.dir }}{% endraw %}
          key: {% raw %}${{ runner.os }}-uv-${{ hashFiles('**/requirements.txt') }}{% endraw %}
          restore-keys: |
            {% raw %}${{ runner.os }}-uv-{% endraw %}

      - uses: actions/setup-node@v4
        with:
          node-version: {% raw %}${{ env.NODE_VERSION }}{% endraw %}

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4
        id: cache-npm
        with:
          path: {% raw %}${{ steps.npm-cache-dir.outputs.dir }}{% endraw %}
          key: {% raw %}${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}{% endraw %}
          restore-keys: |
            {% raw %}${{ runner.os }}-node-{% endraw %}

      - name: Install dependencies
        run: |
          python -m uv pip install --system -r requirements.txt -r requirements.dev.txt
          npm install

      - name: Install system packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
{%- if postgres_docker_image == 'postgis/postgis' %}
            libpq-dev \
            binutils \
            libproj-dev \
            gdal-bin \
            python3-gdal \
            libaio-dev \
{%- endif %}
{%- if include_weasyprint %}
            libpango-1.0-0 \
            libharfbuzz0b \
            libpangoft2-1.0-0 \
            ttf-mscorefonts-installer \
{%- endif %}
            build-essential
          playwright install --with-deps

      - name: Run migrations
        run: |
          python -m manage migrate --skip-checks
{%- if include_vite %}

      - name: Build frontend
        run: |
          npm run build
{%- endif %}

      - name: Build staticfiles
        run: |
          python -m manage tailwind --skip-checks build
          python -m manage collectstatic --no-input --skip-checks --no-default-ignore

      # https://hynek.me/articles/ditch-codecov-python/
      - name: Run tests
        run: |
          time coverage run -m pytest --durations 10 --reverse -p no:randomly -n auto --dist loadfile
          python -m coverage html --skip-covered --skip-empty
          python -m coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          # python -m coverage report --fail-under=100

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: {% raw %}coverage-report-${{ github.run_id }}{% endraw %}
          path: htmlcov
        if: {% raw %}${{ failure() }}{% endraw %}

  types:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}

      - name: Install uv
        run: |
          python -m pip install -U pip uv

      - name: Get cache dir
        id: uv-cache
        run: |
          echo "dir=$(uv cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache-uv
        with:
          path: {% raw %}${{ steps.uv-cache.outputs.dir }}{% endraw %}
          key: {% raw %}${{ runner.os }}-uv-${{ hashFiles('**/requirements.txt') }}{% endraw %}
          restore-keys: |
            {% raw %}${{ runner.os }}-uv-{% endraw %}

      - name: Install dependencies
        run: |
          python -m uv pip install --system -r requirements.txt -r requirements.dev.txt

      - name: Install system packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
{%- if postgres_docker_image == 'postgis/postgis' %}
            libpq-dev \
            binutils \
            libproj-dev \
            gdal-bin \
            python3-gdal \
            libaio-dev \
{%- endif %}
{%- if include_weasyprint %}
            libpango-1.0-0 \
            libharfbuzz0b \
            libpangoft2-1.0-0 \
            ttf-mscorefonts-installer \
{%- endif %}
            build-essential

      - name: Run mypy
        env:
          DATABASE_URL: sqlite:///db.sqlite3
        run: |
          python -m mypy

  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}

      - name: Install uv
        run: |
          python -m pip install -U pip uv

      - name: Get cache dir
        id: uv-cache
        run: |
          echo "dir=$(uv cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache-uv
        with:
          path: {% raw %}${{ steps.uv-cache.outputs.dir }}{% endraw %}
          key: {% raw %}${{ runner.os }}-uv-${{ hashFiles('**/requirements.txt') }}{% endraw %}
          restore-keys: |
            {% raw %}${{ runner.os }}-uv-{% endraw %}

      - name: Install dependencies
        run: |
          python -m uv pip install --system -r requirements.txt -r requirements.dev.txt

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
{%- if postgres_docker_image == 'postgis/postgis' %}
            libpq-dev \
            binutils \
            libproj-dev \
            gdal-bin \
            python3-gdal \
            libaio-dev \
{%- endif %}
{%- if include_weasyprint %}
            libpango-1.0-0 \
            libharfbuzz0b \
            libpangoft2-1.0-0 \
            ttf-mscorefonts-installer \
{%- endif %}
            build-essential

      - name: Run deployment checks
        env:
          DEBUG: False
          DATABASE_URL: sqlite:///db.sqlite3
        run: |
          python -m manage check --deploy

  fly:
    runs-on: ubuntu-latest
    env:
      OP_SERVICE_ACCOUNT_TOKEN: {% raw %}${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}{% endraw %}
    steps:
      - uses: actions/checkout@v4

      - uses: 1password/install-cli-action@v1

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Set Fly.io API token
        run: |
          echo "FLY_API_TOKEN={{"{{"}} op://fly/{{ fly_app_name }}/fly/api_token {{"}}"}}" | op inject >> $GITHUB_ENV

      - name: Check `fly.toml` config
        run: |
          flyctl config validate
