justfile := justfile_directory() + "/.just/python.just"

[private]
default:
    @just --list --justfile {% raw %}{{ justfile }}{% endraw %}

[private]
fmt:
    @just --fmt --justfile {% raw %}{{ justfile }}{% endraw %}

# Run the Playwright codegen command within the 'app' container
[no-cd]
codegen *ARGS:
{%- if include_vite %}
    @just docker run app "-e DJANGO_VITE_DEV_SERVER_HOST=node" "python manage.py runserver 0.0.0.0:8000 & while ! curl -s http://0.0.0.0:8000 > /dev/null; do sleep 1; done; playwright codegen {% raw %}{{ ARGS }}{% endraw %}; kill %1"
{%- else %}
    @just docker command "python manage.py runserver 0.0.0.0:8000 & while ! curl -s http://0.0.0.0:8000 > /dev/null; do sleep 1; done; playwright codegen {{ ARGS }}; kill %1"
{%- endif %}

# Run the test suite, generate code coverage, and export html report
[no-cd]
coverage-html: test
    rm -rf htmlcov
    @just docker command python -m coverage html --skip-covered --skip-empty

# Run the test suite, generate code coverage, and print report to stdout
[no-cd]
coverage-report: test
    @just docker command python -m coverage report

# Install dependencies
[no-cd]
install *ARGS:
    $python -m uv pip sync {% raw %}{{ ARGS }}{% endraw %} requirements.txt requirements.dev.txt

# Generate requirements.txt file
[no-cd]
lock *ARGS:
    $python -m uv pip compile pyproject.toml --output-file requirements.txt --generate-hashes {% raw %}{{ ARGS }}{% endraw %}
    $python -m uv pip compile pyproject.toml --output-file requirements.dev.txt --generate-hashes --extra dev --constraint requirements.txt {% raw %}{{ ARGS }}{% endraw %}

# Run tests using pytest within the 'app' container, with optional arguments
[no-cd]
test *ARGS:
{%- if include_vite %}
    @just docker run app "-e DJANGO_VITE_DEV_SERVER_HOST=node" coverage run -m pytest {% raw %}{{ ARGS }}{% endraw %}
{%- else %}
    @just docker command coverage run -m pytest {% raw %}{{ ARGS }}{% endraw %}
{%- endif %}

# Run tests with Playwright debug mode enabled, in the 'app' container, with optional arguments
[no-cd]
test-debug *ARGS:
{%- if include_vite %}
    @just docker run app "-e DJANGO_VITE_DEV_SERVER_HOST=node -e PWDEBUG=1" pytest {% raw %}{{ ARGS }}{% endraw %}
{%- else %}
    @just docker run app "-e PWDEBUG=1" pytest {% raw %}{{ ARGS }}{% endraw %}
{%- endif %}

# Run mypy on project
[no-cd]
types:
    @just docker command python -m mypy

# Update dependencies
[no-cd]
update:
    @just py install --upgrade

# Generate and upgrade dependencies
[no-cd]
upgrade:
    @just py lock --upgrade

# Create virtual environment and install Python dependency tools
[no-cd]
venv:
    #!/usr/bin/env bash
    set -euo pipefail
    if ! [ -d $VIRTUAL_ENV ]; then
        if command -v uv &>/dev/null; then
            uv venv --seed $VIRTUAL_ENV
        else
            $system_python -m venv $VIRTUAL_ENV
        fi
    fi
