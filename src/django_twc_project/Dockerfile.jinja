# syntax=docker/dockerfile:1
ARG PYTHON_VERSION={{ python_version }}
ARG NODE_VERSION={{ node_version }}
ARG UID=1000
ARG GID=1000

FROM python:${PYTHON_VERSION}-slim as base
ARG UID
ARG GID
ENV DEBUG False
ENV DEBIAN_FRONTEND noninteractive
ENV PIP_DISABLE_PIP_VERSION_CHECK 1
ENV PYTHONPATH /app
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV UV_SYSTEM_PYTHON true
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt,sharing=locked \
  echo 'deb http://deb.debian.org/debian/ bookworm main contrib' >> /etc/apt/sources.list \
  && apt-get update --fix-missing \
  && apt-get install -y --no-install-recommends \
  build-essential \
  curl \
  git \
  jq \
  # tailscale
  ca-certificates \
  iptables \
  gosu \
{%- if postgres_docker_image == 'postgis/postgis' %}
  # postgres
  libpq-dev \
  # geodjango/postgis
  binutils \
  libproj-dev \
  gdal-bin \
  python3-gdal \
  libaio-dev \
{%- endif %}
{%- if include_weasyprint %}
  # weasyprint
  libpango-1.0-0 \
  libharfbuzz0b \
  libpangoft2-1.0-0 \
  ttf-mscorefonts-installer \
{%- endif %}
  # cleanup
  && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* \
  && mkdir -p /app \
  && addgroup -gid "${GID}" --system django \
  && adduser -uid "${UID}" -gid "${GID}" --home /home/django --system django
WORKDIR /app


FROM base as node-base
ARG NODE_VERSION
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt,sharing=locked \
  curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash - \
  && apt-get update --fix-missing \
  && apt-get install -y --no-install-recommends nodejs \
  && npm install -g npm@latest \
  && apt-get autoremove -y \
  && apt-get clean -y \
  && rm -rf /var/lib/apt/lists/*


FROM base as py
COPY --link requirements*.txt ./
RUN --mount=type=cache,target=/root/.cache/pip --mount=type=cache,target=/root/.cache/uv \
  python -m pip install --upgrade pip uv \
  && uv pip install -r requirements.txt


FROM node-base as node
COPY --from=py --link /usr/local /usr/local
COPY --link package*.json /app
RUN --mount=type=cache,target=/root/.npm npm install


FROM node as tailwind
ARG UID
ARG GID
ARG BUILDARCH
ARG BUILDVARIANT
RUN case ${BUILDARCH} in \
  arm64) \
  case ${BUILDVARIANT} in \
  v7) TAILWINDCSS_ARCH=armv7 ;; \
  *)  TAILWINDCSS_ARCH=arm64 ;; \
  esac ;; \
  *) TAILWINDCSS_ARCH=x64 ;; \
  esac \
  && TAILWINDCSS_VERSION=$(jq -r '.dependencies.tailwindcss // .devDependencies.tailwindcss' package.json | sed 's/^[^0-9]*//') \
  && curl -L https://github.com/tailwindlabs/tailwindcss/releases/download/v${TAILWINDCSS_VERSION}/tailwindcss-linux-${TAILWINDCSS_ARCH} -o /usr/local/bin/tailwindcss-linux-${TAILWINDCSS_ARCH}-${TAILWINDCSS_VERSION} \
  && chmod 755 /usr/local/bin/tailwindcss-linux-${TAILWINDCSS_ARCH}-${TAILWINDCSS_VERSION} \
  && chown ${UID}:${GID} /usr/local/bin/tailwindcss-linux-${TAILWINDCSS_ARCH}-${TAILWINDCSS_VERSION}


FROM base as app
COPY --from=py --link /usr/local /usr/local
COPY --link manage.py /app
COPY --link package.json /app
COPY --link {{ module_name }} /app/{{ module_name }}
COPY --link templates /app/templates


FROM mcr.microsoft.com/playwright/python:v{{ playwright_version }} as dev
COPY --from=py --link /usr/local /usr/local
COPY --from=app --link /app /app


FROM node as node-final
COPY --from=tailwind --link /usr/local /usr/local
COPY --from=app --link /app /app
COPY --link static /app/static
{%- if include_vite %}
COPY --link postcss.config.mjs tailwind.config.mjs tsconfig.json vite.config.ts /app/
RUN npm run build \
  && python manage.py tailwind --skip-checks build
{%- else %}
COPY --link postcss.config.mjs tailwind.config.mjs /app/
RUN python manage.py tailwind --skip-checks build
{%- endif %}


FROM app as static
ENV DATABASE_URL sqlite://:memory:
COPY --from=py --link /usr/local /usr/local
COPY --from=node-final --link /app/static/dist /app/static/dist
COPY --from=node-final --link /app/package*.json /app/
COPY --link static/public /app/static/public
RUN python manage.py collectstatic --noinput --clear --skip-checks --no-default-ignore


FROM base as final
ARG UID
ARG GID
COPY --from=py --link /usr/local /usr/local
COPY --from=app --chown=${UID}:${GID} --link /app /app
COPY --from=static --chown=${UID}:${GID} --link /app/staticfiles /app/staticfiles
COPY --from=docker.io/tailscale/tailscale:stable /usr/local/bin/tailscaled /usr/local/bin/tailscaled
COPY --from=docker.io/tailscale/tailscale:stable /usr/local/bin/tailscale /usr/local/bin/tailscale
COPY --chmod=755 --link .bin /
RUN mkdir -p /var/run/tailscale /var/cache/tailscale /var/lib/tailscale \
  && apt-get remove -y --purge \
  build-essential \
  curl \
  git \
  jq \
  && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*
EXPOSE 8000
