[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [{name = "John Doe", email = "jdoe@example.com"}]
dependencies = [
  "attrs",
  "croniter",
  "django<5.2",
  "django-allauth[socialaccount]",
  "django-charid-field",
  "django-click",
  # upper bounds for `django-email-relay` since it runs distributed
  # https://django-email-relay.westervelt.dev/en/latest/updating.html
  "django-email-relay<0.5",
  "django-extensions",
  "django-filter",
  "django-flyio",
  "django-fsm-2",
  "django-health-check",
  "django-htmx",
  "django-import-export[all]",
  "django-ninja",
  "django-q2",
  "django-q-registry",
  "django-simple-history",
  "django-simple-nav",
  # https://github.com/revsys/django-health-check/issues/434
  # https://github.com/jschneier/django-storages/issues/1430
  "django-storages[s3]<1.14.4",
  "django-stubs-ext",
  "django-tailwind-cli",
  "django-template-partials",
  "django-twc-toolbox[crud]",
  "django-twc-ui[tables] @ git+https://super-secret-token:x-oauth-basic@github.com/westerveltco/django-twc-ui.git@v2024.8.27",
  "django-vite",
  "environs[django]",
  "gunicorn",
  "heroicons[django]",
  "httpx",
  "openpyxl",
  "psycopg[binary, pool]",
  "sentry-sdk[django]",
  "whitenoise"
]
dynamic = ["version"]
name = "with_vite"
requires-python = ">=3.12"

[project.optional-dependencies]
docs = [
  "cogapp",
  "furo",
  "myst-parser",
  "sphinx",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinx-inline-tabs"
]
tests = [
  "coverage[toml]",
  "django-coverage-plugin",
  "django-perf-rec",
  "faker",
  "model-bakery",
  "playwright==1.46.0",
  "pytest",
  "pytest-cov",
  "pytest-django",
  "pytest-is-running",
  "pytest-playwright",
  "pytest-randomly",
  "pytest-xdist"
]
types = [
  "django-stubs",
  "mypy",
  "types-croniter",
  "types-openpyxl"
]

[tool.bumpver]
commit = true
commit_message = ":bookmark: bump version {old_version} -> {new_version}"
current_version = "2025.1.1"
push = false  # set to false for CI
tag = false
version_pattern = "YYYY.MM.INC1"

[tool.bumpver.file_patterns]
".copier/project.yml" = [
  'current_version: {version}'
]
"tests/test_version.py" = [
  'assert __version__ == "{version}"'
]
"with_vite/__init__.py" = [
  '__version__ = "{version}"'
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if DEBUG:",
  "if not DEBUG:",
  "if settings.DEBUG:",
  "if TYPE_CHECKING:",
  'def __str__\(self\)\s?\-?\>?\s?\w*\:'
]

[tool.coverage.run]
branch = true
omit = [
  "*/node_modules/*",
  "with_vite/*/migrations/*",
  "with_vite/asgi.py",
  "with_vite/gunicorn.py",
  "with_vite/settings.py",
  "with_vite/wsgi.py",
  "templates/*",
  "tests/*",
  "manage.py",
  "requirements.txt"
]
plugins = ["django_coverage_plugin"]

[tool.django-stubs]
django_settings_module = "with_vite.settings"

[tool.djlint]
blank_line_after_tag = "endblock,endpartialdef,extends,load"
blank_line_before_tag = "block,partialdef"
custom_blocks = "partialdef"
custom_html = "c-\\w+"
ignore = "H031"  # Don't require `meta` tag keywords
indent = 2
profile = "django"

[tool.hatch.version]
path = "with_vite/__init__.py"

[tool.mypy]
check_untyped_defs = true
exclude = [
  "docs",
  "tests",
  "migrations",
  "venv",
  ".venv"
]
files = [
  "with_vite"
]
no_implicit_optional = true
plugins = [
  "mypy_django_plugin.main"
]
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_errors = true
module = [
  "*.migrations.*",
  "tests.*",
  "docs.*"
]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "allauth.*",
  "boto3.*",
  "botocore.*",
  "debug_toolbar.*",
  "django_filters.*",
  "django_q.*",
  "djclick.*",
  "gunicorn.*",
  "health_check.*",
  "neapolitan.*",
  "simple_history.*"
]

[tool.mypy_django_plugin]
ignore_missing_model_attributes = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
addopts = "--reuse-db -n auto --dist loadfile --cov --cov-report= --cov-config=pyproject.toml"
norecursedirs = ".* bin build dist *.egg htmlcov logs node_modules static templates venv"
python_files = "tests.py test_*.py *_tests.py"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".github",
  ".hg",
  ".mypy_cache",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "build",
  "dist",
  "migrations",
  "node_modules",
  "venv"
]
extend-include = ["*.pyi?"]
indent-width = 4
# Same as Black.
line-length = 88
# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Like Black, use double quotes for strings.
quote-style = "double"

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I"]
ignore = ["E501", "E741"]  # temporary
select = [
  "B",  # flake8-bugbear
  "E",  # Pycodestyle
  "F",  # Pyflakes
  "I",  # isort
  "UP"  # pyupgrade
]
unfixable = []

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["with_vite"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.uv]
dev-dependencies = [
  "copier",
  "copier-templates-extensions",
  "django-browser-reload",
  "django-debug-toolbar",
  "ipython",
  "ruff"
]
